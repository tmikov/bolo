

                   ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
                      SOURCER REMARKS FILE - SAMPLE REMARKS
                   ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ


 ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±± DATA REMARKS ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

        Remarks in this section are linked to the .def  file,  section  3
        relating to data items.    Remarks  will  appear  in  the  source
        code output to the right of the data reference  definition.   Each
        remark can encompass as many lines as needed, up to 34 characters
        per line.  Each line starts with the 3 digit hex reference number
        starting at 001 to a maximum of 3FFh (1023 entries).   The number
        is also entered in the .def file for the particular data item(s).


    --------- Data Remarks -----------  -------- comments ignored here --------
end


 ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±± LOCATION REMARKS ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

        Remarks in this section are linked to the .def  file,  section  3
        relating to location references.   Remarks  will  appear  in  the 
        source code output as lines prior to  the  location  item.   Each
        remark can encompass as many lines as needed, up to 76 characters
        per line.  Each line starts with the 2 digit hex reference number
        starting at 01 up to a maximum of FEh (254 entries).   The number
        is entered in the .def file for the particular location item(s).

        relating to location references.   Remarks  will  appear  in  the 
        source code output as lines prior to  the  location  item.   Each
        remark can encompass as many lines as needed, up to 76 characters
        per line.  Each line starts with the 2 digit hex reference number
        starting at 01 up to a maximum of FEh (254 entries).   The number
        is entered in the .def file for the particular location item(s).


    ----------------------- Location Reference Remarks ------------------------
01
        Restore int 8, int 9, set text mode, print msg_exit and terminate.
end
   
 ±±±±±±±±±±±±±±±±±±±±±±±±±±±±± SUBROUTINE REMARKS ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

        Remarks in this section are linked to the .def  file,  section  3
        relating to subroutine references.   Remarks will appear  in  the 
        source code output as lines prior to the subroutine  item.   Each
        remark can encompass as many lines as needed, up to 76 characters
        per line.  Each line starts with the 2 digit hex reference number
        starting at 01 up to a maximum of FFh (255 entries).   The number
        is entered in the .def file for a particular subroutine item(s).


    ---------------------- Subroutine Reference Remarks -----------------------
01                                 alist_readxy
         
        input: bl:x, bh:y
        output: ax, di, zf
        Read from the byte array alist_buf_e[64][64]
        di = alist_buf_e + x + y*64
        ax = sext(*di)
        zf = test(ax)
        Read the head of the list of actors in cell x, y.
02                                 maze_readxy
         
        input: 
                dl: signed x
                dh: signed y
        output: 
                si: buffer address
                al: value in buffer
                zf: test on al
        Read from the byte array maze_buf_ei[64][64] with 64b stride.
        Note that the values are treated as signed, so negative coords
        kind-of work. This is deliberate because maze rendering does 
        occasionally use negative coords, even though they are not
        displayed.
        si = maze_buf_e + x + y*64
        al = *si
        zf = test(al)
03                                 draw_gmaze_22x7
         
        Draw "GENERATING MAZE".
        Copy 7 rows of 22 (0x16) bytes from ds:[offset bmp_gmaze_22x7] to
        [dest_seg]:[dest_ofs]
        The destination has a stride of 40 (0x28) bytes.
04                                 draw_char_1x7
         
        Input
                 al: index char "0-9A-Z! c"
                 es, di: destination
        Copy 7 rows of 1 bytes from ds:[offset bmps_font_1x7 + (u16)al * 7] to
        two pages:
                es:[di] and es:[di + 0x2000]
        The destination has a stride of 40 (0x28) bytes.
05                                 draw_bolo_8x20
         
        Input: es, di: destination
        Enable EGA planes 1,3 (0xA -> bright green).
        Copy 20 rows of 8 bt (64 px) from ds:[offset bmp_bolo_8x20] to es:di
        with dest stride 40.
06                                 draw_str
         
        Input:
                bx - ASCII string terminating in a negative char.
                di - screen offset
        Draw a string starting at the specified screen offset. Each char is
        8x7 pixels.
        sub di,117h moves to the next char (di - 7*40 + 1).
07                                 clr_alt_box
         
        Clear the 0x0-224x194 pixel box in the alternative video page.
08                                 vid_offset
        Inputs: 
                CF:BL: 9-bit x
                BH:    y
        Outputs: 
                DI: offset in video page (stride 40)
                AL: 1-bit mask of the pixel at the offset
        Preserve: BX, CX
        Calculate video offset and bitmask from x and y coordinates.
        x is 9 bit.
        offset = CF:BL/8 + BH*8+BH*32
        mask = 0x80 >> (CF:BL%8)
09                                 vert_line
        Draw a vertical 1-pixel line
        Inputs:
                CF:BL: 9-bit x
                BH: y
                CX: number of rows - 1
                ES: dest segment
        Outputs: CX = 0
        Preserve: BX, DX
        Logical OR of ES:DI with 1 bit mask with stride 40 for CX + 1 rows.
0A                                 horiz_line
        Draw a horizontal 1-pixel width line
        Inputs:
                CF:BL: 9-bit x
                BH: y
                CX: length in pixels - 1
                ES: dest segment
        Outputs: CX = 0
        Preserve: BX, DX
0B                                 draw_rect
        Draw a rectangle with 1-pixel lines
        Inputs:
                BL=x
                BH=y
                DL=width pixels - 1
                DH=height pixels - 1
        Preserve: BX, DX
0C                                 draw_comp_arr
        Draw the compass arrow based on ship_angle_e. Note that the
        arrow bitmaps are indexed through comp_offs, but they are
        partly overlapping to save a few bytes.
        The values of ship_angle go clockwise: 0 is North, 3 is East, etc.
        N, NE, E, SE, S, SW, W, NW
0D                                 draw_ship
        Draw rotated ship and gun and collision detection.
        Collision detection by counting screen bytes that already had
        the same bit set.
0E                                 sub_on_faster
        Accelerate the ship.
        vel_magn_e  holds the velocity magnitude in the range [0..5]
        vel_angle_e holds the velocity angle: 0 (0 degrees) or 4 (180 degrees).
        vel_angle_e is relative to ship_angle_e, so the ship moves either fwd
        or backwards.
        The resulting vector varies between 5,0 (5 fwd) and 5, 4 (5 backwards).
        vel_magn_e is intended to be added to ship_angle_e.
0F                                 getkey
        Output: 
                AL: scan code or 0
                ZF: test AL
        Performs some logic which I don't fully understand yet. This is
        what I understand. It reads kbdin_key_e (which is set by int 9)
        and clear it. Handles ESC, F1, F2, F3 directly and checks again.
        Otherwise returns the scancode in AL and updates ZF.
10                                 handle_kbd
        If there is a key, and it is valid, and there hasn't been a 
        collision, process the key by calling its kbd func.
11                                 update_fuel
        fuel_level_e:dw is the level of fuel, 16 bits
        fuel_disp_e:db  is the display representation, corresponding to the
                top 8 bits of fuel_level_e. fuel_disp_e follows fuel_level_e
                gradually (+1/-1 per update).
        Subtract double the velocity from the fuel level. If negative, display
        "OUT OF FUEL" and end level.
        Update fuel_disp_e with +1, 0, or -1 to move it towards hi(fuel_level_e).
        Render fuel_e on screen.
12                                 edit_levdens
        Edit the level and density on screen.
        Calls edit_digit two times with the values and coordinates of leveli
        and density.
        Initializes time_5bit.
13                                 edit_digit
        Inputs:
                di: screen offset of digit
                bl: max value + 1 (0xA for level, 6 for density)
                bh: current value
        Output: al: the new value
        Edit a digit on screen.
14                                 draw_mstrs
        Inputs:
                ds:si - a list of string offset, screen offset pairs, ending
                        with a 0.
        Draw a list of strings to specified coordinates on screen.
15                                 rndnum
        Inputs:
                al: random range + 1
        Return:
                al: a random number in the range [0..AL).
                zf: test AL
16                                 rnd_update
        Inputs: AL: mask + 1
        Return: AL (something) and ZF
        I am not sure but I think this routine shuffles the random generator
        state while also taking the current time into consideration.
        The result is masked with AX-1.
17                                 maze_rnd_xy
        Output: 
                DL: x, DH: y, i
                AL: maze_buf[x,y]
                SI: address in buffer
        Generate random numbers x=[1..61], y=[3..60] until maze_buf[x,y] >= 0.
18                                in_screen
        Input: BL: x, BH: y
        Output: CF, clear if x <= 207 && y <= 190
        Check whether the specified coordinate is in the visible screen.
19                                adjust_bullets
        Bullet coordinates are screen-relative, so they have to be adjusted as
        we move the ship and the screen.
        
1A                                update_bullets
        Move all bullets, checking for out of screen and collision detection.
        Collision is checked for 12 steps ahead. If no collision or out of screen,
        the bullet is moved 8 steps ahead.
1B                                bullet_collide
        Input: BL, BH - screen-relative x, y of bullet.
        Invoked when a bullet hits something.
1C                                collide_cell
        Input:
                BL, BH: maze cell to check
                BP: object cell x, y
                DL, DH: object offset x, y
        Preserve: DX,  BP. Unless inc_fuel is invoked, also CX, and sets BX to BP.
        Check the actors in the specified cell list for collision against the
        specified object. Update the corresponding flags.
1D                                rel_coords
        Input:
                BL, BH: cell x,y
                DL, DH: offset x, y
        Output:
                Bl, BH: screen-relative coordinates
                CF: 0 on success
        Convert absolute coordinates (cell and offset) into screen relative coords.
        If the coords are not in the screen, set CF and return 0FFh, 0FFh.
1E                                proc_26
        Input: AL
        Output: AL
        Preserve: AH, BX, DX
        Obtain a random value from var_142[64], mask it with AL and return it.
end
